--- /home/jrm/Documents/QGIS/english/user_guide_1.6/working_with_vector.tex	2010-11-29 21:39:56.900084766 +0100
+++ /home/jrm/Documents/QGIS/english/trunk/user_guide/working_with_vector.tex	2011-09-18 21:08:51.634526775 +0200
@@ -7,17 +7,24 @@
 % comment out the following line:
 %\updatedisclaimer
 
-\qg supports vector data in a number of formats, including those
-supported by the OGR library data provider plugin, such as ESRI shapefiles,
-\index{shapefiles}\index{ESRI!shapefiles}\index{SHP files}
-MapInfo MIF (interchange format)\index{MIF files}\index{MapInfo!MIF files}
-and MapInfo TAB (native format).\index{TAB files}\index{MapInfo!TAB files}
-You find a list of OGR supported vector formats in Appendix~\ref{appdx_ogr}.
-
-\qg also supports PostGIS\index{PostGIS}\index{PostgreSQL!PostGIS} layers
-in a PostgreSQL database using the PostgreSQL data provider plugin.
-Support for additional data types (eg. delimited text) is provided by
-additional data provider plugins.\index{delimited text}
+\qg uses the OGR library to read and write vector data formats
+\footnote{GRASS vector and PostgreSQL support is supplied by native 
+QGIS data provider plugins.}, including ESRI shapefiles,\index{shapefiles}
+\index{ESRI!shapefiles}\index{SHP files}, MapInfo MIF (interchange 
+format)\index{MIF files}\index{MapInfo!MIF files}, MapInfo TAB 
+(native format)\index{TAB files}\index{MapInfo!TAB files} and many more. 
+At the date of this document, 60 vector formats are supported 
+by the OGR library \cite{OGRweb}. The complete list available at 
+\url{http://www.gdal.org/ogr/ogr_formats.html}.
+
+\textbf{Note}: Not all of the listed formats may work in QGIS for various 
+reasons. For example, some require external commercial libraries or 
+the GDAL/OGR installation of your OS was not build to support the format you want
+to use. Only those formats that have been well tested will appear in the list
+of file types when loading a vector into QGIS. Other untested formats can 
+be loaded by selecting *.*.
+
+Working with GRASS vector data is described in Section \ref{sec:grass}.
 
 This section describes how to work with several common formats:
 ESRI shapefiles, PostGIS layers and SpatialLite layers. Many of the
@@ -25,8 +32,6 @@
 This is by design and includes the identify, select, labeling and attributes
 functions.
 
-Working with GRASS vector data is described in Section \ref{sec:grass}.
-
 \section{ESRI Shapefiles}
 \index{vector layers!ESRI shapefiles}
 \index{shapefiles}
@@ -35,7 +40,8 @@
 
 The standard vector file format used in \qg is the ESRI Shapefile. Support
 is provided by the OGR Simple Feature Library (\url{http://www.gdal.org/ogr/})
-\index{OGR}. A shapefile actually consists of several files. The following three are required:
+\index{OGR}. A shapefile actually consists of several files. The following three 
+are required:
 \index{shapefile!format}
 
 \begin{itemize}[label=--]
@@ -45,15 +51,19 @@
 \end{itemize}
 
 Shapefiles also can include a file with a \filename{.prj} suffix, which contains
-the projection information. While it is very useful to have a projection file, it is not mandatory. A shapefile dataset can contain additional files. For further details see the ESRI technical specification at \url{http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf} \index{shapefile!specification}.
+the projection information. While it is very useful to have a projection file, 
+it is not mandatory. A shapefile dataset can contain additional files. For 
+further details see the ESRI technical specification at 
+\url{http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf} 
+\index{shapefile!specification}.
 
 \minisec{Problem loading a shape .prj file}
 
 If you load a shapefile with \filename{.prj} file and \qg is not
 able to read the coordinate reference system from that file, you have to define the
 proper projection manually within the \tab{General} tab of the \dialog{Layer
-Properties} dialog. This is due to the fact, that \filename{.prj} files often
-do not provide the complete projection parameters, as used in \qg and listed in
+Properties} dialog of the layer. This is due to the fact, that \filename{.prj} files 
+often do not provide the complete projection parameters, as used in \qg and listed in
 the \dialog{CRS} dialog.
 
 For that reason, if you create a new shapefile with \qg, two different projection
@@ -91,12 +101,14 @@
 That will bring up a standard open file dialog (see Figure
 \ref{fig:openshapefile}) which allows you to navigate the file system and load
 a shapefile or other supported data source.
-The selection box \selectstring{Files of type}{\ldots} allows you to preselect some OGR supported file formats.
+The selection box \selectstring{Files of type}{\ldots} allows you to preselect 
+some OGR supported file formats.
 
 You can also select the Encoding type for the shapefile if desired.
 
-Selecting a shapefile from the list and clicking \button{Open} loads it into \qg. Figure
-\ref{fig:loadedshapefile} shows \qg after loading the \filename{alaska.shp} file.
+Selecting a shapefile from the list and clicking \button{Open} loads it into 
+\qg. Figure \ref{fig:loadedshapefile} shows \qg after loading the 
+\filename{alaska.shp} file.
 
 
 \begin{Tip}\caption{\textsc{Layer Colors}}
@@ -105,7 +117,7 @@
 \end{Tip}
 
 Once loaded, you can zoom around the shapefile using the map navigation tools.
-To change the symbology of a layer, open the \dialog{Layer Properties} dialog by double
+To change the style of a layer, open the \dialog{Layer Properties} dialog by double
 clicking on the layer name or by right-clicking on the name in the legend and
 choosing \dropmenuopt{Properties} from the popup menu. See
 Section \ref{sec:symbology} for more information on setting symbology of
@@ -137,25 +149,27 @@
 \item In the tab \tab{General} click the \button{Create Spatial Index} button.
 \end{itemize}
 
-\subsection{Loading a MapInfo Layer}
+\section{Loading a MapInfo Layer}
 \index{vector layers!MapInfo}
 
-\includegraphics[width=0.7cm]{mActionAddNonDbLayer} To load a MapInfo layer, click on the \toolbtntwo{mActionAddNonDbLayer}{Add
-Vector Layer} toolbar bar button or type \keystroke{Ctrl-Shift-V}, change the
-file type filter to \selectstring{Files of Type}{[OGR] MapInfo (*.mif
-*.tab *.MIF *.TAB)} and select the layer you want to load.
+\includegraphics[width=0.7cm]{mActionAddNonDbLayer} To load a MapInfo layer, 
+click on the \toolbtntwo{mActionAddNonDbLayer}{Add Vector Layer} toolbar bar 
+button or type \keystroke{Ctrl-Shift-V}, change the file type filter to 
+\selectstring{Files of Type}{[OGR] MapInfo (*.mif *.tab *.MIF *.TAB)} and 
+select the .TAB or .tab layer you want to load.
 
-\subsection{Loading an ArcInfo Binary Coverage}
+\section{Loading an ArcInfo Binary Coverage}
 \index{vector layers!ArcInfo Binary Coverage}
 
-\includegraphics[width=0.7cm]{mActionAddNonDbLayer} To load an ArcInfo binary coverage, click on the
-\toolbtntwo{mActionAddNonDbLayer}{Add Vector Layer} toolbar button or type
-\keystroke{Ctrl-Shift-V} to open the \dialog{Add Vector Layer} dialog. Select
-\radiobuttonon{Directory}. Change to \selectstring {Type}{Arc/Info Binary Coverage}.
-Navigate to the directory that contains the coverage files and select it.
+\includegraphics[width=0.7cm]{mActionAddNonDbLayer} To load an ArcInfo binary 
+coverage, click on the \toolbtntwo{mActionAddNonDbLayer}{Add Vector Layer} 
+toolbar button or type \keystroke{Ctrl-Shift-V} to open the \dialog{Add Vector 
+Layer} dialog. Select \radiobuttonon{Directory}. Change to 
+\selectstring{Type}{Arc/Info Binary Coverage}. Navigate to the directory that 
+contains the coverage files and select it.
 
-Similarly, you can load directory based  vector files in the UK National Transfer Format as well as the
-raw TIGER Format of the US Census Bureau.
+Similarly, you can load directory based  vector files in the UK National 
+Transfer Format as well as the raw TIGER Format of the US Census Bureau.
 
 \section{PostGIS Layers}
 \index{vector layers!PostGIS|see{PostGIS}}
@@ -167,19 +181,6 @@
 vector functions such as select and identify work more accurately than with
 OGR layers in \qg.
 
-To use PostGIS layers you must:\index{PostgreSQL!loading layers}
-
-\begin{itemize}[label=--]
-\item Create a stored connection in \qg to the PostgreSQL database (if one is
-not already defined).\index{PostgreSQL!connection}
-\item Connect to the database.
-\item Select the layer to add to the map.
-\item Optionally provide a SQL \usertext{where}
-clause to define which features
-to load from the layer.
-\item Load the layer.
-\end{itemize}
-
 \subsection{Creating a stored
 Connection}\index{PostgreSQL!connection}\label{sec:postgis_stored}
 
@@ -201,23 +202,26 @@
 \caption{PostGIS Connection
 Parameters}\label{tab:postgis_connection_parms}\medskip
  \begin{tabular}{|l|p{5in}|}
-\hline Name & A name for this connection. Can be the same as \textsl{Database}.
-\\
+\hline Name & A name for this connection. Can be the same as \textsl{Database}. \\
+\hline Service & Service parameter to be used alternatively to hostname/port 
+(and potentially database). This can be defined in pg\_service.conf \\
 \hline Host \index{PostgreSQL!host}
 & Name of the database host. This must be a resolvable host name the same as
 would be used to open a telnet connection or ping the host. If the database is
 on the same computer as \qg, simply enter 'localhost' here. \\
-\hline Database \index{PostgreSQL!database} & Name of the database.  \\
 \hline Port \index{PostgreSQL!port}& Port number the PostgreSQL database
 server listens on. The default port is 5432.\\
-\hline SSL mode \index{PostgreSQL!sslmode}& How the SSL connection will be negotiated with the server. These are the options:
+\hline Database \index{PostgreSQL!database} & Name of the database.  \\
+\hline SSL mode \index{PostgreSQL!sslmode}& How the SSL connection will be 
+negotiated with the server. These are the options:
 \begin {itemize}
 \item disable: only try an unencrypted SSL connection;
 \item allow: try a non-SSL connection, if that fails, try an SSL connection;
 \item prefer (the default): try an SSL connection, if that fails, try a non-SSL connection;
 \item require: only try an SSL connection.
 \end {itemize}
-Note that massive speedups in PostGIS layer rendering can be achieved by disabling SSL in the connection editor. \\
+Note that massive speedups in PostGIS layer rendering can be achieved by 
+disabling SSL in the connection editor. \\
 \hline Username \index{PostgreSQL!username}& User name used to login to the
 database. \\
 \hline Password \index{PostgreSQL!password}& Password used with
@@ -233,6 +237,7 @@
 \item \checkbox{Save Password}
 \item \checkbox{Only look in the geometry\_columns table}
 \item \checkbox{Only look in the 'public' schema}
+\item \checkbox{Also list tables with no geometry}
 \item \checkbox{Use estimated table metadata}
 \end{itemize}
 
@@ -262,7 +267,11 @@
 \item If the \dialog{Add PostGIS Table(s)} dialog is not already open, click on the
 \toolbtntwo{mActionAddLayer}{Add PostGIS Layer} toolbar button.
 \item Choose the connection from the drop-down list and click \button{Connect}.
-\item Find the layer you wish to add in the list of available layers.
+\item Select or unselect \checkbox{Also list tables with no geometry}
+\item Optionally use some \checkbox{Search Options} to define which features
+to load from the layer or use the \button{Build query} icon to start the 
+Query builder dialog.
+\item Find the layer(s) you wish to add in the list of available layers.
 \item Select it by clicking on it. You can select multiple layers by holding
 down the \keystroke{shift} key while clicking. See Section \ref{sec:query_builder} for
 information on using the PostgreSQL Query Builder to further define the layer.
@@ -353,10 +362,11 @@
 To import a shapefile, click on the \toolbtntwo{spiticon}{SPIT} tool in the
 toolbar to open the \\
 \dialog{SPIT - Shapefile to PostGIS Import Tool} dialog. Select the PostGIS database
-you want to connect to and click on \button{Connect}. Now you can add one or more
-files to the queue by clicking on the \button{Add} button. To process the files,
-click on the \button{OK} button. The progress of the import as well as any
-errors/warnings will be displayed as each shapefile is processed.
+you want to connect to and click on \button{Connect}. If you want, you can define or 
+change some import options. Now you can add one or more files to the queue by 
+clicking on the \button{Add} button. To process the files, click on the \button{OK} 
+button. The progress of the import as well as any errors/warnings will be displayed 
+as each shapefile is processed.
 
 \begin{Tip}\caption{\textsc{Importing Shapefiles Containing
 PostgreSQL Reserved Words}}\index{PostGIS!SPIT!reserved words}
@@ -472,7 +482,8 @@
 \begin{figure}[ht]
    \centering
    \includegraphics[clip=true, width=9cm]{vectorWrapping}
-   \caption{Map crossing \degrees{180} longitude applying the ST\textunderscore Shift\textunderscore Longitude function \nixcaption}
+   \caption{Map crossing \degrees{180} longitude applying the ST\textunderscore 
+   Shift\textunderscore Longitude function \nixcaption}
 \label{fig:vector_wrapping}
 \end{figure}
 
@@ -497,13 +508,32 @@
 
 \includegraphics[width=0.7cm]{mActionAddSpatiaLiteLayer}
 The first time you load data from a SpatiaLite database, begin by clicking on the
-\toolbtntwo{mActionAddSpatiaLiteLayer}{Add SpatiaLite Layer} toolbar button or by selecting the
-\dropmenuopttwo{mActionAddSpatiaLiteLayer}{Add SpatiaLite Layer...}
+\toolbtntwo{mActionAddSpatiaLiteLayer}{Add SpatiaLite Layer} toolbar button or 
+by selecting the \dropmenuopttwo{mActionAddSpatiaLiteLayer}{Add SpatiaLite Layer...}
 option from the \mainmenuopt{Layer} menu or by typing \keystroke{L}.
-This will bring up a window, which will allow you to either connect to a SpatiaLite database already known to \qg, which
-you can choose from the dropdown menu or to define a new connection to a new database. To define a new connection,
-click on \button{New} and use the file browser to point to your SpatiaLite database,
-which is a file with a \filename{.sqlite } extension.
+This will bring up a window, which will allow you to either connect to a SpatiaLite 
+database already known to \qg, which you can choose from the dropdown menu or to define 
+a new connection to a new database. To define a new connection, click on \button{New} and 
+use the file browser to point to your SpatiaLite database, which is a file with 
+a \filename{.sqlite } extension.
+
+If you want to save a vector layer to SpatiaLite format you can do this by right clicking
+the layer in the legend. Then click on \dropmenuopt{Save as}, define the name of the output 
+file, sqlite as format and the CRS and then add 'SPATIALITE=YES' in the OGR data source 
+creation option field. This tells OGR to create a SpatiaLite database. See 
+also \url{http://www.gdal.org/ogr/drv_sqlite.html}.
+
+\minisec{Creating a new SpatiaLite layer}
+
+If you want to create a new SpatiaLite layer, please refer to section \ref{sec:create spatialite}.
+
+\begin{Tip}\caption{\textsc{SpatiaLite data management Plugin}}\index{SpatiaLite!Data management} For SpatiaLite data management you can also use the Python Plugin 
+'QspatiaLite' from the 'QGIS Contributed Repository'. It can be downloaded and 
+integrated with the Python Plugin Installer and provides QGIS integration (import 
+QGIS layers, View Spatial Tables and Queries in QGIS) a SQL editor with syntax 
+highlighting and autocompletion and a SQL Query Builder to build complex queries 
+plus further functionality. 
+\end{Tip}
 
 \section{The Vector Properties Dialog}\label{sec:vectorprops}
 \index{vector layers!properties dialog}
@@ -523,118 +553,51 @@
    \caption{Vector Layer Properties Dialog \nixcaption}\label{fig:vector_symbology}
  \end{figure}
 
-\subsection{Symbology Tab}\label{sec:symbology}
+\subsection{Style Tab}\label{sec:symbology}
 \index{vector layers!symbology}
 
-\qg supports a number of symbology renderers to control how
-vector features are displayed. Currently the following renderers
-are available:
-
-\begin{description}
-    \item[Single symbol] - a single style is applied to every
-    object in the layer.\index{vector layers!renderers!single symbol}
-    \item[Graduated symbol] - objects within the layer are
-    displayed with different symbols classified by the values of a
-    particular field.\index{vector layers!renderers!graduated symbol}
-    \item[Continuous color] - objects within the layer are
-    displayed with a spread of colours classified by the numerical
-    values within a specified field.\index{vector layers!renderers!continuous
-color}
-    \item[Unique value] - objects are classified by the unique
-    values within a specified field with each value having a
-    different symbol.\index{vector layers!renderers!unique value}
-\end{description}
-
-To change the symbology for a layer, simply double click on its legend
-entry and the vector \dialog{Layer Properties} dialog will be
-shown.\index{symbology!changing}
-
-\begin{figure}[ht]
-\centering
-\caption{Symbolizing Options \nixcaption}
-   \subfloat[Single symbol] {\label{subfig:single_symbol}\includegraphics[clip=true, width=0.4\textwidth]{vectorClassifySingle}}
-   \hspace{1cm}
-   \subfloat[Graduated symbol] {\label{subfig:graduated_symbol}\includegraphics[clip=true, width=0.4\textwidth]{vectorClassifyGraduated}}
-   \hspace{1cm}
-   \subfloat[Continous color] {\label{subfig:cont_color}\includegraphics[clip=true, width=0.4\textwidth]{vectorClassifyContinous}}
-   \hspace{1cm}
-   \subfloat[Unique value] {\label{subfig:unique_val}\includegraphics[clip=true, width=0.4\textwidth]{vectorClassifyUnique}}
-\end{figure}
-
-% FIXME: outdated
-% Since \usertext{version v0.9} there is a function to use image files stored on
-% your computer as fill pattern for vector layers.
-
-\minisec{Style Options} \label{sec:style_options} \index{vector layers!styles}
-Within this dialog you can style your vector layer. Depending on the selected
-rendering option you have the possibility to also classify your mapfeatures.
-
-At least the following styling options apply for nearly all renderers:
-\begin{description}
-\item[Fill options]
-\begin{description}
- \item[Fill style] - Style for filling. Beside the given brushes you can
- select \selectstring{Fill style}{? Texture} and click the \browsebutton
- button for selecting your own texture file. Currently the fileformats
- \filename{*.jpeg, *.xpm, and *.png} are supported.
- \item[Fill color] - fill-color of your features.
-\end{description}
-\item[Outline options]
-\begin{description}
- \item[Outline style] - pen-style for your outline of your feature. You can
- also set this to 'no pen'.
- \item[Outline color] - color of the ouline of your feature.
- \item[Outline width] - width of your features.
-\end{description}
-\end{description}
-
-Once you have styled your layer you also could save your layer-style to a
-separate file (with \filename{*.qml}-ending).
-To do this, use the button \button{Save Style \ldots}. No need to say that
-\button{Load Style \ldots} loads your saved layer-style-file.
+Since \qg 1.4.0 a new symbology was integrated in parallel to improve and 
+finally replace the old symbology. \qg 1.7.0 now uses the new symbolgy as default, 
+which provides a variety of improvements and new features. 
 
-If you wish to always use a particular style whenever the layer is loaded,
-use the \button{Save As Default} button to make your style the default. Also,
-if you make changes to the style that you are not happy with, use the \button{Restore
-Default Style} button to revert to your default style.
-
-\minisec{Vector transparency} \label{sec:vect_transparency}
-\index{vector layers!transparency}
-
-\qg allows to set a transparency for every vector layer. This can be done with
-the slider \\
-\slider{Transparency} inside the \tab{symbology} tab (see
-fig. \ref{subfig:single_symbol}). This is very useful for overlaying several
-vector layers.
-
-\subsection{New Generation Symbology}
-
-Since \qg 1.4.0  a new symbology was integrated in parallel with the symbology
-described above. This new generation symbology provides a variety of improvements and
-new features and will replace the current symbology in one of the upcoming releases.
-To switch to the new symbolgy you currently have to click on the \button{New symbology} button in the \tab{General} tab of the \dialog{Layer Properties} dialog. You can
-also make the New symobolgy the default, activating \checkbox{Use new generation symbology for rendering} in the \tab{Rendering \& SVG} tab under the \mainmenuopt{Settings} \arrow \dropmenuopt{Options} menu.
+A description of the old symbology is available in section 
+\ref{sec:oldsymbology}.
 
 \minisec{Understanding the new generation symbology}
 
-There are three types of symbols: marker symbols (for points), line symbols and
-fill symbols (for polygons). Symbols can consist of one or more symbol layers. It
-is possible to define the color of a symbol and this color is then defined for all
-symbol layers. Some layers may have the color locked - for those the color can not
-be altered. This is useful when you define the color of a multilayer symbol.
-Similarly, it is possible to define the width for line symbols, as well as size and
-angle for marker symbols.
+There are three types of symbols: marker symbols (for points), line symbols (for 
+lines) and fill and outline symbols (for polygons). Symbols can consist of one or 
+more symbol layers. It is possible to define the color of a symbol and this color 
+is then defined for all symbol layers. Some layers may have the color locked - for 
+those the color can not be altered. This is useful when you define the color of a multilayer symbol. Similarly, it is possible to define the width for line symbols, 
+as well as size and rotation for marker symbols.
 
-\minisec{Available symbol layer types}
+\minisec{Available symbol layer types}\label{symboltypes}
 
 \begin{itemize}[label=--]
-\item \textbf{Simple marker}: Rendering with one of hardcoded markers.
-\item \textbf{Simple line}: Usual rendering of a line (with specified
-width, color and pen style).
-\item \textbf{Simple fill}: Usual rendering of a polygon (with defined
-fill color, fill pattern and outline).
+\item Point layers
+\begin{itemize}[label=--]
+\item \textbf{Font marker}: Rendering with a font.
+\item \textbf{Simple marker}: Rendering with a hardcoded marker.
 \item \textbf{SVG marker}: Rendering with a SVG picture.
+\end{itemize}
+\item Line layers
+\begin{itemize}[label=--]
+\item \textbf{Line decoration}: Add a line decoration, e.g an arrow to indicate line direction.
 \item \textbf{Marker line}: A line rendered by repeating a marker symbol.
+\item \textbf{Simple line}: Usual rendering of a line (with specified width, 
+	color and pen style).
+\end{itemize}
+\item Polygon layers
+\begin{itemize}[label=--]
+\item \textbf{Centroid fill}: Fill a polygon centroid with a hardcoded marker.
+\item \textbf{SVG fill}: Fill a polygon with a SVG symbol. 
+\item \textbf{Simple fill}: Usual rendering of a polygon (with defined fill color, 
+	fill pattern and outline).
+\item \textbf{Outline: Line decoration}: Add a line decoration, e.g an arrow to indicate line direction.
+\item \textbf{Outline: Marker line}: Use a hardcoded marker as area outline.
+\item \textbf{Outline: Simple line}: Define width, color and pen style as area outline.
+\end{itemize}
 \end{itemize}
 
 \minisec{Color ramps}
@@ -652,57 +615,64 @@
 number of color classes.
 \end{itemize}
 
-Color ramps can be defined in the \dialog{Style Manager} dialog (see Section
-\ref{subsec:stylemanager}) by selecting \\
-\selectstring{Style item type:}{Color ramp} as style element type from the drop-down list, clicking on \button{Add item} button and then choosing a color ramp type.
+Color ramps can be defined in the \tab{Color ramp} tab of the \dialog{Style Manager} 
+(see Section \ref{subsec:stylemanager}) by clicking the \button{Add} button and then choosing a color ramp type.
 
 \minisec{Styles}
 
 A style groups a set of various symbols and color ramps. You can define your
 prefered or frequently used symbols, and can use it  without having to recreate
 it everytime. Style items (symbols and color ramps) have always a name by which
-they can be queried from the style. There is one default style in \qg (modifiable)
-and the user can add further styles.
+they can be queried from the style. There is at least one default style in \qg 
+(modifiable) and the user can add further styles.
 
 \minisec{Renderers}
 
 The renderer is responsible for drawing a feature together with the correct
-symbol. There are three types of renderers: single symbol, categorized (called
-unique color in the old symbology), and graduated. There is no continuous color
-renderer, because it is in fact only a special case of the graduated renderer.
+symbol. There are four types of renderers: single symbol, categorized (called
+unique color in the old symbology), graduated and rule-based. There is no continuous 
+color renderer, because it is in fact only a special case of the graduated renderer.
 The categorized and graduated renderer can be created by specifying a symbol
 and a color ramp - they will set the colors for symbols appropriately.
 
-\subsection{Working with the New Generation Symbology}
+\subsubsection{Working with the New Generation Symbology}\label{new_generation_sym}
 
-First you have to enable the new generation symbology clicking on the
-\button{New symbology} button in the \tab{Symbology} tab of the
-\dialog{Layer Properties} dialog. The new dialog allows to choose one of the
-three renderers: single symbol, categorized and graduated. Depending on the
-chosen renderer, the symbology tab provides different settings and options, that
-will be described in the following sections. The new generation symbology dialog 
-also provides a \button{Style Manager} button which gives access to the Style 
-Manager (see section \ref{subsec:stylemanager}). The Style Manager allows you to 
+In the \tab{Style} tab you can choose one of the four renderers: single symbol, 
+categorized, graduated and rule-based. Depending on the chosen renderer, the 
+symbology tab provides different settings and options, that will be described 
+in the following sections. The new generation symbology dialog also provides 
+a \button{Style Manager} button which gives access to the Style Manager 
+(see section \ref{subsec:stylemanager}). The Style Manager allows you to 
 edit and remove existing symbols and add new ones. 
 
+\begin{Tip}\caption{\textsc{Select and change multiple symbols}}\index{vector layers!symbology} 
+The New Generation Symbology allows to select multiple symbols and right click to change 
+color, transparency, size, or outline width of selected entries.
+\end{Tip}
+
 \minisec{Single Symbol Renderer}
 
 The Single Symbol Renderer is used to render all features of the layer using a
 single user-defined symbol. The properties, that can be adjusted in the
-Symbology tab, depend partially on the type of the layer, but all types share
+\tab{Style} tab, depend partially on the type of the layer, but all types share
 the following structure. In the top left part of the tab, there is a preview of
 the current symbol to be rendered. In the bottom part of the tab, there is a
 list of symbols already defined for the current style, prepared to be used via
 selecting them from the list. The current symbol can be modified using the
-\button{Properties} button, which opens a \dialog{Symbol Properties} dialog, or
-the \button{Set Color} button, which opens an ordinary \dialog{Color} dialog.
-After having done any needed changes, the symbol can be added to the list of
-current style symbols (using the \button{Add to style} button) and then easily
-be used in the future.
-
-\textbf{Note}: To modify line width, besides modifying the symbol itself, you
-can use data-defined Size Scale (available through \button{Advanced} next to 
-\button{Add to Style}).
+\button{Change} button below the preview, which opens a \dialog{Symbol Properties} 
+dialog, or the \button{Change} button right of the preview, which opens an ordinary 
+\dialog{Color} dialog. 
+
+In the \tab{Style} tab you can apart from a general layer transparency also 
+define to use millimeter or map units for the size scale. And you can use 
+data-defined size scale and rotation (available through \button{Advanced} 
+next to \button{Save as style}). The \button{Symbol levels} button allows to 
+enable and define the order in which the symbol layers are rendered (if the 
+symbol consits of more than one layer).
+
+After having done any needed changes, the symbol can be added to the list 
+of current style symbols (using the \button{Save as style} button) and then 
+easily be used in the future.
 
 \begin{figure}[ht]
 \centering
@@ -711,23 +681,23 @@
    \subfloat[Single symbol line properties] {\label{subfig:singleNG2}\includegraphics[clip=true, width=0.3\textwidth]{singlesymbol_ng_line}}
    \hspace{1cm}
    \subfloat[Single symbol area properties] {\label{subfig:singleNG3}\includegraphics[clip=true, width=0.3\textwidth]{singlesymbol_ng_area}}
-\caption{New Single Symbolizing options \nixcaption}
+\caption{Single Symbolizing options \nixcaption}
 \end{figure}
 
 \minisec{Categorized Renderer}
 
 The Categorized Renderer is used to render all features from a layer, using a
 single user-defined symbol, which color reflects the value of a selected
-feature's attribute. The Symbology tab allows you to select:
+feature's attribute. The \tab{Style} tab allows you to select:
 
 \begin{itemize}[label=--]
 \item The attribute (using the Column listbox)
-\item The symbol (using the Symbol Properties dialog)
+\item The symbol (using the Symbol dialog)
 \item The colors (using the Color Ramp listbox)
 \end{itemize}
 
-The Advanced button in the lower right corner of the dialog allows to set
-th fields containing rotation and size scale information.
+The \button{Advanced} button in the lower right corner of the dialog allows to set
+the fields containing rotation and size scale information.
 For convenience, the list in the bottom part of the tab lists the values of
 all currently selected attributes together, including the symbols that will
 be rendered.
@@ -737,7 +707,7 @@
 
 \begin{figure}[ht]
    \centering
-   \caption{New Categorized Symbolizing options \nixcaption}\label{fig:catsymNG}
+   \caption{Categorized Symbolizing options \nixcaption}\label{fig:catsymNG}
    \includegraphics[clip=true, width=10cm]{categorysymbol_ng_line}
 \end{figure}
 
@@ -750,7 +720,7 @@
 \begin{figure}[ht]
    \centering
    \caption{Example of custom gradient color ramp with multiple stops \nixcaption}\label{fig:ccrg}
-   \includegraphics[clip=true, width=10cm]{customColorRampGradient.png}
+   \includegraphics[clip=true, width=6cm]{customColorRampGradient}
 \end{figure}
 
 \minisec{Graduated Renderer}
@@ -760,7 +730,7 @@
 feature's attribute to a class. Like Categorized Renderer, it allows to define
 rotation and size scale from specified columns.
 
-Analogue to the categorized rendered, the symbology tab allows you to select:
+Analogue to the categorized rendered, the \tab{Style} tab allows you to select:
 
 \begin{itemize}[label=--]
 \item The attribute (using the Column listbox)
@@ -778,7 +748,7 @@
  \item Pretty Breaks
 \end{itemize}
 
-The listbox in the  bottom part of the symbology tab lists the classes together with their ranges,
+The listbox in the  bottom part of the \tab{Style} tab lists the classes together with their ranges,
 labels and symbols that will be rendered.
 
 The example in figure \ref{fig:gradsymNG} shows the graduated rendering dialog
@@ -787,14 +757,17 @@
 \begin{figure}[ht]
    \centering
    \includegraphics[clip=true, width=10cm]{graduatesymbol_ng_line}
-   \caption{New Graduated Symbolizing options \nixcaption}\label{fig:gradsymNG}
+   \caption{Graduated Symbolizing options \nixcaption}\label{fig:gradsymNG}
 \end{figure}
 
 \minisec{Rule-based rendering}
 
 The rule-based renderer is used to render all the features from a layer, using
 rule based symbols, whose color reflects the classification of a selected
-feature's attribute to a class.
+feature's attribute to a class. The rules are based on SQL statements. You can 
+also use the Query Builder to create them. The dialog allows rule grouping by 
+filter or scale and you can decide if you want to enable symbol levels or use 
+only first matched rule.
 
 The example in figure \ref{fig:rulesymNG} shows the rule-based rendering dialog
 for the rivers layer of the \qg sample dataset.
@@ -802,12 +775,13 @@
 \begin{figure}[ht]
    \centering
    \includegraphics[clip=true, width=10cm]{rulesymbol_ng_line}
-   \caption{New Rule-based Symbolizing options \nixcaption}\label{fig:rulesymNG}
+   \caption{Rule-based Symbolizing options \nixcaption}\label{fig:rulesymNG}
 \end{figure}
 
 \minisec{Point displacement}
 
-The point displacement renderer offers to visualize all features of a point
+The point displacement renderer is only available, if you load the Displacement 
+plugin in the QGIS Plugin Manager. It offers to visualize all features of a point
 layer, even if they have the same location. To do this, the symbols of the
 points are placed on a displacement circle around a center symbol.
 
@@ -823,7 +797,7 @@
 the symbol to be rendered. In the top left part of the dialog, you find a preview
 of the current symbol as it will be displayed in the map canvas. Below the preview
 is the list of symbol layers. To start the symbol properties dialog, click the
-\dropmenuopttwo{mActionOptions}{Properties} button in the \tab{Symbology} tab of the
+\dropmenuopttwo{mActionOptions}{Properties} button in the \tab{Style} tab of the
 \dialog{Layer Properties} dialog.
 
 The control panels allow adding or removing layers, changing the position of layers,
@@ -831,25 +805,8 @@
 shown the settings applicable to the single symbol layer selected in the symbol
 layer list. The most important is the 'Symbol Layer Type' combo box, which allows
 you to choose the layer type. The available options depend on the layer type
-(Point, Line, Polygon).
-
-\begin{description}
-\item Symbol layer type options for point layers
-\begin{itemize}[label=--]
-\item \textbf{SimpleMarker}: Border color, Fill color, Size, Angle, Offset X,Y
-\item \textbf{SvgMarker}: Size, Angle, Offset X,Y, SVG Image
-\end{itemize}
-\item Symbol layer type options for line layers
-\begin{itemize}[label=--]
-\item \textbf{LineDecoration}: Color
-\item \textbf{MarkerLine}: Marker, Marker Interval, Rotate marker, Line offset
-\item \textbf{SimpleLine}: Color, Pen width, pen style, Offset, Join style and Cap style
-\end{itemize}
-\item Symbol layer type options for polygon layers
-\begin{itemize}[label=--]
-\item \textbf{SimpleFill}: Color, Fill style, Border color, Border style, Border width
-\end{itemize}
-\end{description}
+(Point, Line, Polygon). The symbol layer type options are described in section 
+\ref{symboltypes}.
 
 
 \begin{figure}[ht]
@@ -862,7 +819,7 @@
 \caption{Defining symbol properties \nixcaption}
 \end{figure}
 
-\subsection{Style Manager to manage symbols and color ramps}\label{subsec:stylemanager}
+\subsubsection{Style Manager to manage symbols and color ramps}\label{subsec:stylemanager}
 
 The Style Manger is a small helper application, that lists symbols and color
 ramps available in a style. It also allows you to add and/or remove items. To
@@ -875,12 +832,107 @@
    \caption{Style Manager to manage symbols and color ramps \nixcaption}\label{fig:stylemanager}
 \end{figure}
 
-\subsection{Labels Tab}\label{labeltab}
+\subsubsection{Old Symbology}\label{sec:oldsymbology}
+\index{vector layers!old symbology}
+
+\textbf{Note}: \qg 1.7 still supports the usage of the old symbology, although it is 
+recommended to switch to the new symbology, described in section 
+\ref{sec:symbology}, because the old symbology will be removed in one 
+of the next releases.
+
+If you want or need to switch back to the old symbology you can click on the 
+\button{Old symbology} button in the \tab{Style} tab of the \dialog{Layer Properties} dialog. 
+
+You can also make the old symobolgy the default, deactivating \checkbox{Use 
+new generation symbology for rendering} in the \tab{Rendering} tab 
+under \mainmenuopt{Settings} \arrow \dropmenuopt{Options}.
+
+The old \qg symbology supports the following renderers:
+
+\begin{description}
+    \item[Single symbol] - a single style is applied to every
+    object in the layer.\index{vector layers!renderers!single symbol}
+    \item[Graduated symbol] - objects within the layer are
+    displayed with different symbols classified by the values of a
+    particular field.\index{vector layers!renderers!graduated symbol}
+    \item[Continuous color] - objects within the layer are
+    displayed with a spread of colours classified by the numerical
+    values within a specified field.\index{vector layers!renderers!continuous
+color}
+    \item[Unique value] - objects are classified by the unique
+    values within a specified field with each value having a
+    different symbol.\index{vector layers!renderers!unique value}
+\end{description}
+
+To change the symbology for a layer, simply double click on its legend
+entry and the vector \dialog{Layer Properties} dialog will be
+shown.\index{symbology!changing}
+
+\begin{figure}[ht]
+\centering
+\caption{Old Symbolizing Options \nixcaption}
+   \subfloat[Single symbol] {\label{subfig:single_symbol}\includegraphics[clip=true, width=0.4\textwidth]{vectorClassifySingle}}
+   \hspace{1cm}
+   \subfloat[Graduated symbol] {\label{subfig:graduated_symbol}\includegraphics[clip=true, width=0.4\textwidth]{vectorClassifyGraduated}}
+   \hspace{1cm}
+   \subfloat[Continous color] {\label{subfig:cont_color}\includegraphics[clip=true, width=0.4\textwidth]{vectorClassifyContinous}}
+   \hspace{1cm}
+   \subfloat[Unique value] {\label{subfig:unique_val}\includegraphics[clip=true, width=0.4\textwidth]{vectorClassifyUnique}}
+\end{figure}
+
+\minisec{Style Options} \label{sec:style_options} \index{vector layers!styles}
+Within this dialog you can style your vector layer. Depending on the selected
+rendering option you have the possibility to also classify your mapfeatures.
+
+At least the following styling options apply for nearly all renderers:
+\begin{description}
+\item[Fill options]
+\begin{description}
+ \item[Fill style] - Style for filling. Beside the given brushes you can
+ select \selectstring{Fill style}{? Texture} and click the \browsebutton
+ button for selecting your own texture file. Currently the fileformats
+ \filename{*.jpeg, *.xpm, and *.png} are supported.
+ \item[Fill color] - fill-color of your features.
+\end{description}
+\item[Outline options]
+\begin{description}
+ \item[Outline style] - pen-style for your outline of your feature. You can
+ also set this to 'no pen'.
+ \item[Outline color] - color of the ouline of your feature.
+ \item[Outline width] - width of your features.
+\end{description}
+\end{description}
 
-The \tab{Labels} tab allows you to enable labeling features and control a number of
-options related to fonts, placement, style, alignment and buffering.
+Once you have styled your layer you also could save your layer-style to a
+separate file (with \filename{*.qml}-ending).
+To do this, use the button \button{Save Style \ldots}. No need to say that
+\button{Load Style \ldots} loads your saved layer-style-file.
 
-We will illustrate this by labelling the lakes shapefile of the
+If you wish to always use a particular style whenever the layer is loaded,
+use the \button{Save As Default} button to make your style the default. Also,
+if you make changes to the style that you are not happy with, use the 
+\button{Restore Default Style} button to revert to your default style.
+
+\minisec{Vector transparency} \label{sec:vect_transparency}
+\index{vector layers!transparency}
+
+\qg allows to set a transparency for every vector layer. This can be done with
+the slider \slider{Transparency} inside the \tab{Style} tab (see
+fig. \ref{subfig:single_symbol}). This is very useful for overlaying several
+vector layers.
+
+\subsection{Labels Tab}\label{labeltab}
+
+As for the symbology \qg 1.7.0 currently provides an old and a new labeling 
+engine in parallel. The \tab{Labels} tab still contains the old labeling. The 
+new labeling is implemented as a core application and will replace the features 
+of the old labels tab in one of the next versions.
+
+We recommend to switch to the new labeling, described in section \ref{newlabel}.
+
+The old labeling in the \tab{Labels} tab allows you to enable labeling features 
+and control a number of options related to fonts, placement, style, alignment 
+and buffering. We will illustrate this by labelling the lakes shapefile of the
 \filename{\qg\_example\_dataset}:
 
 \begin{enumerate}
@@ -895,11 +947,12 @@
 \item Enter a default for lakes that have no name. The default label will be
   used each time \qg encounters a lake with no value in the \guilabel{NAMES}
 field.
-\item If have labels extending over several lines, check \checkbox{Multiline
+\item If you have labels extending over several lines, check \checkbox{Multiline
 labels?}. \qg will check for a true line return in your label field and
 insert the line breaks accordingly. A true line return is a \textbf{single}
 character \textbackslash n, (not two separate characters, like a backlash
-\textbackslash ~followed by the character n).
+\textbackslash ~followed by the character n).  To insert line returns in an
+attribute field configure the edit widget to be text edit (not line edit).
 \item Click \button{Apply}.
 \end{enumerate}
 
@@ -933,7 +986,6 @@
 lakes labels:
 
 \begin{enumerate}
-\item Click the \tab{Buffer} tab.
 \item Click the \checkbox{Buffer Labels?} checkbox to enable buffering.
 \item Choose a size for the buffer using the spin box.
 \item Choose a color by clicking on \button{Color} and choosing your
@@ -956,7 +1008,7 @@
 Not that the \tab{Label} tab provides a \classname{preview-box} where your
 selected label is shown.
 
-\subsection{New Labeling}\index{New labeling}\label{newlabel}
+\subsubsection{New Labeling}\index{New labeling}\label{newlabel}
 
 The new \toolbtntwo{labeling}{Labeling} core application provides smart labeling
 for vector point,  line and polygon layers and only requires a few parameters.
@@ -1028,6 +1080,19 @@
 and you can define whether to show all labels (including colliding labels) and label
 candidates for debugging.
 
+\minisec{Keywords to use in attribute columns for labeling}
+
+There is a list of supported key words, that can be used for the placement of labels in defined attribute colums?
+
+\begin{itemize}[label=--]
+\item \textbf{For horizontal alignment}: left, center, right
+\item \textbf{For vertical alignment}: bottom, base, half, top
+\item \textbf{Colors can be specified in svg notation}, e.g. \#ff0000
+\item \textbf{for bold, underlined, strikeout and italic}: 0 = false 1 = true
+\end{itemize}
+
+A combination of key words in one column also works, e.g.: base right or bottom left.
+
 \subsection{Attributes Tab}\index{Attributes}\label{label_attributes}
 
 Within the \tab{Attributes} tab the attributes of the selected dataset can be
@@ -1034,9 +1099,14 @@
 manipulated. The buttons \toolbtntwo{mActionNewAttribute}{New Column} and
 \toolbtntwo{mActionDeleteAttribute}{Delete Column} can be
 used, when the dataset is \toolbtntwo{mActionToggleEditing}{Editing mode}.
+
 At the moment only columns from PostGIS layers can be removed and added. The
 OGR library supports to add new columns, but not to remove them, if you have
-a GDAL version >= 1.6 installed.
+a GDAL version >= 1.6 installed.  In the GDAL/OGR trac there is a ticket with a patch that
+awaits to be committed (\url{http://trac.osgeo.org/gdal/ticket/2671}). Until then QGIS
+(and any other software that uses GDAL/OGR) can only use a workaround to delete
+Shapefile columns. In QGIS this ``workaround'' is a third-party plugin called
+Table Manager.
 
 \minisec{edit widget}
 
@@ -1055,32 +1125,32 @@
 widgets. These widgets are:
 
 \begin{itemize}[label=--]
-\item Line edit: an edit field which allows to enter simple text (or restrict
+\item \textbf{Line edit}: an edit field which allows to enter simple text (or restrict
 to
 numbers for numeric attributes).
-\item Classification: Displays a combo box with the values used for
+\item \textbf{Classification}: Displays a combo box with the values used for
 classification, if you have chosen 'unique value' as legend type in the
-symbology tab of the properties dialog.
-\item Range: Allows to set numeric values from a specific range. The edit
+\tab{Style} tab of the properties dialog.
+\item \textbf{Range}: Allows to set numeric values from a specific range. The edit
 widget can be either a slider or a spin box.
-\item Unique value: The user can select one of the values already used in the
+\item \textbf{Unique values}: The user can select one of the values already used in the
 attribute table. If editable is activated, a line edit is shown with
 autocompletion support, otherwise a combo box is used.
-\item File name: Simplifies the selection by adding a file chooser dialog.
-\item Value map: a combo box with predefined items. The value is stored in
+\item \textbf{File name}: Simplifies the selection by adding a file chooser dialog.
+\item \textbf{Value map}: a combo box with predefined items. The value is stored in
 the attribute, the description is shown in the comboo box. You can define
 values manually or load them from a layer or a CSV file.
-\item Enumeration: Opens a combo box with values that can be used within the
+\item \textbf{Enumeration}: Opens a combo box with values that can be used within the
 columns type. This is currently only supported by the postgres provider.
-\item Immutable: The immutable attribute column is read-only. The user is not
+\item \textbf{Immutable}: The immutable attribute column is read-only. The user is not
 able to modify the content.
-\item Hidden: A hidden attribute column is invisible. The user is not able to 
+\item \textbf{Hidden}: A hidden attribute column is invisible. The user is not able to 
 see its content. 
-\item Checkbox: Displays a checkbox and you can define what attribute is added 
+\item \textbf{Checkbox}: Displays a checkbox and you can define what attribute is added 
 to the column when the checkbox is activated or not.
-\item Text edit: This opens a text edit field that allows multiple lines to be 
+\item \textbf{Text edit}: This opens a text edit field that allows multiple lines to be 
 used. 
-\item Calendar: Opens a calendar widget to enter a date. Column type must be text.
+\item \textbf{Calendar}: Opens a calendar widget to enter a date. Column type must be text.
 \end{itemize}
 
 \subsection{General Tab}\label{vectorgeneraltab}
@@ -1088,10 +1158,13 @@
 The \tab{General} tab is essentially like that of the raster dialog. It
 allows you to change the display name, set scale dependent rendering options,
 create a spatial index of the vector file (only for OGR supported formats and
-PostGIS) and view or change the projection of the specific vetor layer.
+PostGIS) and view or change the projection of the specific vector layer. 
+Additionally it is possible to define a certain Edit User Interface for the 
+vector layer written with the Qt Creator IDE and tools at 
+\url{http://qt.nokia.com/products/developer-tools}. 
 
 The \button{Query Builder} button allows you to create a subset of the
-features in the layer - but this button currently only is available when you
+features in the layer - but currently this button is only available when you
 open the attribute table and select the \button{...} button next to Advanced
 search.
 
@@ -1271,26 +1344,47 @@
 actions to launch web-based reports for an attribute field or combination of
 fields, specifying them in the same way we did in our Google search example.
 
+\subsection{Joins Tab}\label{sec:joins}
+\index{vector layers!joins}
+
+The \tab{Joins} tab allows you to join a loaded attribute table to a loaded 
+vector layer. As key columns you have to define a join layer, a join field and 
+a target field. QGIS currently supports to join non spatial table formats 
+supported by OGR, delimited text and the PostgreSQL provider (see figure~\ref{fig:join_attributes}).
+
+\begin{figure}[ht]
+   \centering
+   \includegraphics[clip=true, width=8cm]{join_attributes}
+   \caption{Join an attribute table to an existing vector layer \nixcaption}
+   \label{fig:join_attributes}
+\end{figure}
+
+Additionally the add vector join dialog allows to: 
+
+\begin{itemize}[label=--]
+\item \checkbox{Cache join layer in virtual memory}
+\item \checkbox{Create attribute index on the join field}
+\end{itemize}
+
 \subsection{Diagram Tab}\label{sec:diagram}
 \index{vector layers!diagram}
 
-The \tab{Diagram} tab allows you to add a grahic overlay to a vector layer.
-To activate this feature, open the Plugin Manager and select the 'Diagram Overlay'
-plugin. After this, there is a new tab in the vector \dialog{Layer
-Properties} dialog where the settings for diagrams may be entered (see
+The \tab{Diagram} tab allows you to add a grahic overlay to a vector layer (see
 figure~\ref{fig:diagramtab}).
 
 \begin{figure}[ht]
    \centering
    \includegraphics[clip=true, width=13cm]{diagram_tab}
-   \caption{Vector properties dialog with diagram tab \nixcaption}\label{fig:diagramtab}
+   \caption{Vector properties dialog with diagram tab \nixcaption}
+   \label{fig:diagramtab}
 \end{figure}
 
-The current implementation of diagrams provides support for piecharts, barcharts,
-proportional SVG symbols, and for linear scaling of the diagram size according
-to a classification attribute. We will demonstrate an example and overlay the
-alaska boundary layer a barchart diagram showing some temperature data from
-a climate vector layer. Both vector layers are part of the \qg sample dataset (see
+The current core implementation of diagrams provides support for piecharts and 
+text diagrams, and for linear scaling of the diagram size according to a 
+classification attribute. The placement of the diagrams interacts with the 
+new labeling. We will demonstrate an example and overlay the alaska 
+boundary layer a piechart diagram showing some temperature data from a climate 
+vector layer. Both vector layers are part of the \qg sample dataset (see
 Section~\ref{label_sampledata}.
 
 \begin{enumerate}
@@ -1299,16 +1393,16 @@
 \filename{alaska.shp} and \filename{climate.shp}.
 \item Double click the \filename{climate} layer in the map legend to open the
 \dialog{Layer Properties} dialog.
-\item Click on the \tab{Diagram Overlay} and select \button{Bar chart} as
+\item Click on the \tab{Diagram Overlay} and select \button{Pie chart} as
 Diagram type.
 \item In the diagram we want to display the values of the three columns
 \filename{T\_F\_JAN, T\_F\_JUL} and \filename{T\_F\_MEAN}. First select
-\filename{T\_F\_JAN} as Attributes and click \button{Add attribute}, then
+\filename{T\_F\_JAN} as Attributes and click the green \button{+} button, then
 \filename{T\_F\_JUL} and finally \filename{T\_F\_MEAN}.
 \item For linear scaling of the diagram size we define \filename{T\_F\_JUL}
 as classification attribute.
-\item Now click on \button{Find maximum value}, choose a size value and unit
-and click \button{Apply} to display the diagram in the \qg main window.
+\item Now click on \button{Find maximum value}, choose 10 as size value and 
+click \button{Apply} to display the diagram in the \qg main window.
 \item You can now adapt the chart size, or change the attribute colors double
 clicking on the color values in the attribute field.
 Figure~\ref{fig:climatediagram} gives an impression.
@@ -1318,7 +1412,8 @@
 \begin{figure}[ht]
    \centering
    \includegraphics[clip=true, width=13cm]{climate_diagram}
-   \caption{Diagram from temperature data overlayed on a map \nixcaption}\label{fig:climatediagram}
+   \caption{Diagram from temperature data overlayed on a map \nixcaption}
+   \label{fig:climatediagram}
 \end{figure}
 
 \section{Editing}\index{editing}
@@ -1332,7 +1427,8 @@
 feature at the same time as you. The last person to save their edits wins.
 \end{Tip}
 
-\subsection{Setting the Snapping Tolerance and Search Radius}\label{snapping_tolerance}
+\subsection{Setting the Snapping Tolerance and Search Radius}
+\label{snapping_tolerance}
 
 Before we can edit vertices, we must set the snapping
 tolerance and search radius to a value that allows us an optimal editing of
@@ -1350,7 +1446,8 @@
 \begin{enumerate}
 \item A general, project wide snapping tolerance can be defined choosing
 \mainmenuopt{Settings} \arrow \dropmenuopttwo{mActionOptions}{Options}.
-(On Mac: go to  \mainmenuopt{\qg} \arrow Preferences, on Linux: \mainmenuopt{Edit} \arrow \dropmenuopttwo{mActionOptions}{Options}.)
+(On Mac: go to  \mainmenuopt{\qg} \arrow Preferences, on Linux: 
+\mainmenuopt{Edit} \arrow \dropmenuopttwo{mActionOptions}{Options}.)
 In the \tab{Digitizing} tab you can select between to vertex, to segment or
 to vertex and segment as default snap mode. You can also define a default
 snapping tolerance and a search radius for vertex edits. The tolerance an be
@@ -1361,17 +1458,17 @@
 of 300ft should be fine at a scale of 1:10 000 should be a reasonable
 setting.
 \item A layer based snapping tolerance can be defined by choosing
-\mainmenuopt{Settings} (or \mainmenuopt{File}) \arrow \dropmenuopttwo{mActionOptions}{Project
-Properties\dots}. In the \tab{General} tab, section \classname{Digitize} you
-can click on \button{Snapping options\dots} to enable and adjust snapping
-mode and tolerance on a layer basis (see Figure~\ref{fig:snappingoptions}).
+\mainmenuopt{Settings} (or \mainmenuopt{File}) \arrow 
+\button{Snapping options\dots} to enable and adjust snapping mode and tolerance 
+on a layer basis (see Figure~\ref{fig:snappingoptions}).
 \end{enumerate}
 Note that this layer based snapping overrides the global snapping option set in the Digitizing tab. So if you need to edit one layer, and snap its vertices to another layer, then enable snapping only on the \usertext{snap to} layer, then decrease the global snapping tolerance to a smaller value.  Furthermore, snapping will never occur to a layer which is not checked in the snapping options dialog, regardless of the global snapping tolerance. So be sure to mark the checkbox for those layers that you need to snap to.
 
 \begin{figure}[ht]
    \centering
    \includegraphics[clip=true, width=12cm]{editProjectSnapping}
-   \caption{Edit snapping options on a layer basis \nixcaption}\label{fig:snappingoptions}
+   \caption{Edit snapping options on a layer basis \nixcaption}
+   \label{fig:snappingoptions}
 \end{figure}
 
 \minisec{Search radius}
@@ -1427,26 +1524,29 @@
 
 \subsubsection{Topological editing}
 
-Besides layer based snapping options the \tab{General} tab in menu
-\mainmenuopt{Settings} \arrow \dropmenuopttwo{mActionOptions}{Project Properties\dots}
-also provides some topological functionalities.
-In the Digitizing option group you can \checkbox{Enable topological editing} and/or activate
-\checkbox{Avoid intersections of new polygons}.
+Besides layer based snapping options you can also define some topological 
+functionalities in the \dialog{Snapping options \dots} dialog in the 
+\mainmenuopt{Settings} (or \mainmenuopt{File}) menu. Here you can define 
+\checkbox{Enable topological editing} and/or for polygon layers you can 
+activate the column \checkbox{Avoid Int.} which avoids intersection of new 
+polygons.
 
 \minisec{Enable topological editing}
 
 The option \checkbox{Enable topological editing} is for editing and maintaining
-common boundaries in polygon mosaics. \qg "detects" a shared boundary in
+common boundaries in polygon mosaics. QGIS 'detects' a shared boundary in
 a polygon mosaic and you only have to move the vertex once and \qg will take
 care about updating the other boundary.
 
 \minisec{Avoid intersections of new polygons}
 
-The second topological option called \checkbox{Avoid intersections of new polygons}
-avoids overlaps in polygon mosaics. It is for quicker digitizing of adjacent polygons.
-If you already have one polygon, it is possible with this option to digitise the second
-one such that both intersect and \qg then cuts the second polygon to the common boundary.
-The advantage is that users don't have to digitize all vertices of the common boundary.
+The second topological option in the \checkbox{Avoid Int.} column, called 
+'Avoid intersections of new polygons' avoids overlaps in polygon mosaics. It is 
+for quicker digitizing of adjacent polygons. If you already have one polygon, 
+it is possible with this option to digitise the second one such that both 
+intersect and \qg then cuts the second polygon to the common boundary. The 
+advantage is that users don't have to digitize all vertices of the common 
+boundary.
 
 \subsection{Digitizing an existing layer}
 \index{vector layers!digitizing}
@@ -1509,9 +1609,8 @@
 tool buttons on the editing toolbar will become available.
 
 \begin{Tip}\caption{\textsc{Save Regularly}}
-Remember to toggle \toolbtntwo{mActionToggleEditing}{Toggle editing}
-off regularly. This allows you to save your recent changes, and also confirms
-that your data source can accept all your changes.
+Remember to \toolbtntwo{mActionFileSave}{Save Edits} regularly. This will
+also check that your data source can accept all the changes.
 \end{Tip}
 
 \minisec{Adding Features}
@@ -1535,9 +1634,10 @@
 The attribute window will appear, allowing you to enter the information for
 the new feature. Figure \ref{fig:vector_digitising} shows setting attributes
 for a fictitious new river in Alaska. In the \tab{Digitising} tab under the
-\mainmenuopt{Settings} \arrow \dropmenuopt{Options} menu, you can also activate the
+\mainmenuopt{Settings} \arrow \dropmenuopt{Options} menu, you can also activate 
 \\
-\checkbox{Suppress attributes pop-up windows after each created feature}.
+\checkbox{Suppress attributes pop-up windows after each created feature}
+\checkbox{Reuse last entered attribute values}.
 
 \begin{figure}[ht]
    \centering
@@ -1584,34 +1684,42 @@
 \minisec{Basic operations}\index{vector layers!Node Tool}
 
 Start by activating the \toolbtntwo{mActionNodeTool}{Node Tool} and selecting
-some features by clicking on it. Red boxes appear at each vertex of this feature.
-This is basic select of the feature. Functionalities are:
+a feature by clicking on it. Red boxes will appear at each vertex of this feature.
+%%Perhaps the error message mentioned below is in fact a bug, in which case the
+%%bug should be fixed rather than including this note
+Note that to select a polygon you must click one of its vertices or edges;
+clicking inside it will produce an error message. Once a feature
+is selected the following functionalities are available:
 
 \begin{itemize}[label=--]
-\item \textbf{Selecting vertex}: Selecting is easy just click on vertex and
-color of this vertex will change to blue. When selecting more vertices
-\keystroke{Shift} key can be used to select more vertices. Or also the
-\keystroke{Ctrl} key can be used to invert selection of vertices (if selected then
-it will be unselected and when not selected vertex will be selected). Also more
-vertices can be selected at once when clicking somewhere outside feature and opening a rectangle where all vertices inside will be selected. Or just click on an edge and
-both adjacent vertices should be selected.
-\item \textbf{Adding vertex}: Adding vertex is simple, too. Just double click near
-some edge and a new vertex will appear on the edge near to the cursor. Note that
-vertex will appear on edge not on cursor position, there it has to be moved if
-necessary.
-\item \textbf{Deleting vertex}: After selecting vertices for deletion, click the
-\keystroke{Delete} key and vertices will be deleted. Note that according to
-standard Quantum GIS behavior, it will leave a necessary number of vertices for
-the feature type you are working on. To delete a complete feature, another tool
-has to be used.
-\item \textbf{Moving vertex}: Select all vertices you want to move. All selected
-vertices are moving in the same direction as the cursor. If snapping is enabled,
+\item \textbf{Selecting vertices}: You can select vertices by clicking on them
+one at a time, by clicking on an edge to select the vertices at both ends, or
+by clicking and dragging a rectangle around some vertices.  When a vertex is
+selected its color changes to blue. To add more vertices to the current selection,
+hold down the \keystroke{Ctrl} key while clicking. Hold down
+\keystroke{Ctrl}\keystroke{Shift} when clicking to toggle the selection state of
+vertices (vertices that are currently unselected will be selected as usual, but
+also vertices that are already selected will become unselected).
+\item \textbf{Adding vertices}: To add a vertex simply double click near
+an edge and a new vertex will appear on the edge near to the cursor. Note that
+the vertex will appear on the edge, not at the cursor position, therefore it has
+to be moved if necessary.
+\item \textbf{Deleting vertices}: After selecting vertices for deletion, click the
+\keystroke{Delete} key. Note that you cannot use the
+\toolbtntwo{mActionNodeTool}{Node Tool} to delete a complete feature; \qg will
+ensure it retains the minimum number of vertices for the feature type you are
+working on. To delete a complete feature use the
+\toolbtntwo{mActionDeleteSelected}{Delete Selected} tool.
+\item \textbf{Moving vertices}: Select all the vertices you want to move. Click
+on a selected vertex or edge and drag in the direction you wish to move. All the
+selected vertices will move together. If snapping is enabled,
 the whole selection can jump to the nearest vertex or line.
 \end{itemize}
 
-The \button{Release} button stores all changes and a new entry appears in the undo
-dialog. Remember that all operations support topological editing when turned on. On
-the fly projection is also supported.
+Each change made with the node tool is stored as a separate entry in the undo dialog.
+Remember that all operations support topological editing when this is turned on.
+On the fly projection is also supported, and the node tool provides tooltips to
+identify a vertex by hovering the pointer over it.
 
 \minisec{Cutting, Copying and Pasting Features}
 \index{vector layers!cut!feature}
@@ -1742,10 +1850,10 @@
    & Split Features
    & \includegraphics[width=0.7cm]{mActionMergeFeatures}
    & Merge Selected Features \\
-\hline \includegraphics[width=0.7cm]{mActionRotatePointSymbols}
-   & Rotate Point Symbols
-   &
-   & \\
+\hline \includegraphics[width=0.7cm]{mActionMergeFeatures}
+   & Merge Attributes of Selected Features
+   &\includegraphics[width=0.7cm]{mActionRotatePointSymbols}
+   & Rotate Point Symbols \\
 \hline
 \end{tabular}
 \caption{Vector layer advanced editing toolbar}\label{tab:advanced_editing}
@@ -1756,22 +1864,21 @@
 \index{vector layers!redo}
 
 The \toolbtntwo{mActionUndo}{Undo} and \toolbtntwo{mActionRedo}{Redo} tools
-allow the user to undo or redo the last or a certain step within the vector editing
-operations. Basic view of Undo/Redo operations is a widget, where all operations
-are shown (see Figure~\ref{fig:vector_redoundo}). This widget is not displayed by
-default. Widget can be displayed by right clicking on toolbar and activating the
+allow the user to undo or redo vector editing operations. There is also a dockable
+widget, which shows all operations in the undo/redo history (see
+Figure \ref{fig:vector_redoundo}). This widget is not displayed by
+default; it can be displayed by right clicking on the toolbar and activating the
 Undo/Redo check box. Undo/Redo is however active, even if the widget is not
 displayed.
 
 When Undo is hit, the state of all features and attributes are reverted to the
-state before the reverted operation happened. Changes which are done elsewhere
-(for example from some plugin), can show unspecific behavior for some operations
-which appears in this box. The operations can be reverted or they stay the same.
-
-An action can be triggered by clicking on Undo or Redo buttons or by clicking
-directly on the item to which you want to return to. Another possibility to
-trigger an undo operation is to click on the \button{undo/redo} buttons in
-the advanced digitizing tool bar.
+state before the reverted operation happened. Changes other than normal vector
+editing operations (for example changes done by a plugin), may or may not be
+reverted, depending on how the changes were performed.
+
+To use the undo/redo history widget simply click to select an operation in the
+history list; all features will be reverted to the state they were in after
+the selected operation.
 
 \begin{figure}[ht]
    \centering
@@ -1829,10 +1936,19 @@
 You can reshape line and polygon features using the
 \toolbtntwo{mActionReshape}{Reshape Features} icon on the toolbar. It
 replaces the line or polygon part from the first to the last intersection
-with the original line. With polygons this can sometime lead to unintended
+with the original line. With polygons this can sometimes lead to unintended
 results. It is mainly useful to replace smaller parts of a polygon, not major
 overhauls and the reshapeline is not allowed to cross several polygon rings
-as this would generate an invalide polygon.
+as this would generate an invalid polygon.
+
+For example, you can edit the boundary of a polygon with this tool. First,
+click in the inner area of the polygon next to the point where you want to 
+add a new vertex. Then, cross the boundary and add the vertices outside the
+polygon. To finish, right-click in the inner area of the polygon. The tool
+will automatically add a node where the new line crosses the border. It is 
+also possible to remove part of the area from the polygon, starting the new
+line outside the polygon, adding vertices inside, and ending the line outside
+the polygon with a right click.
 
 \textbf{Note}: The reshape tool may alter the starting position of a polygon
 ring or a closed line. So the point that is represented 'twice' will not be
@@ -1852,14 +1968,22 @@
 The \toolbtntwo{mActionMergeFeatures}{Merge Selected Features} tool allows to
 merge features that have common boundaries and the same attributes.
 
+\minisec{Merge attributes of selected features}
+\index{vector layers!merge!attributes of features}
+
+The \toolbtntwo{mActionMergeFeatures}{Merge Attributes of Selected Features} 
+tool allows to merge attributes of features with common boundaries and 
+attributes without merging their boundaries.
+
 \minisec{Rotate Point Symbols}
 \index{vector layers!rotate!symbol}
 
-The \toolbtntwo{mActionRotatePointSymbols}{Rotate Point Symbols} tool
-allows to change the rotation of point symbols in the map canvas, if
-you have defined a rotation column from the attribute table of the point
-layer in the \tab{Symbology} tab of the \dialog{Layer Properties}.
-Otherwise the tool is inactive.
+%% FIXME change, if support in new symbology is available, too
+The \toolbtntwo{mActionRotatePointSymbols}{Rotate Point Symbols} tool is 
+currently only supported by the old symbology engine. It allows to change the 
+rotation of point symbols in the map canvas, if you have defined a rotation 
+column from the attribute table of the point layer in the \tab{Style} tab of 
+the \dialog{Layer Properties}. Otherwise the tool is inactive.
 
 \begin{figure}[ht]
    \centering
@@ -1888,7 +2012,7 @@
 \toolbtntwo{mActionNewVectorLayer}{New Shapefile Layer} from the
 \mainmenuopt{Layer} menu. The \dialog{New Vector Layer} dialog will be
 displayed as shown in Figure \ref{fig:newvectorlayer}. Choose the type of
-layer (point, line or polygon).
+layer (point, line or polygon) and the CRS (Coordinate Reference System).
 
 \begin{figure}[ht]
    \centering
@@ -1901,9 +2025,10 @@
 time, only shapefiles can be created. In a future version of \qg, creation of
 any OGR or PostgreSQL layer type will be supported.
 
-To complete the creation of the new Shapefile layer, add the desired attributes by
-clicking on the \button{Add} button and specifying a name and type for the
-attribute. Only \selectstring{Type}{real}, \selectstring{Type}{integer}, and
+To complete the creation of the new Shapefile layer, add the desired attributes 
+by clicking on the \button{Add} button and specifying a name and type for the
+attribute. A first 'id' column is added as default but can be removed, if not 
+wanted. Only \selectstring{Type}{real}, \selectstring{Type}{integer}, and
 \selectstring{Type}{string} attributes are supported. Additionally and
 according to the attribute type you can also define the width and precision
 of the new attribute column. Once you are happy with the attributes, click
@@ -1946,17 +2071,20 @@
 \index{editing!working with the attribute table}
 
 The attribute table displays features of a selected layer. Each row in the table
-represents one map feature with its attributes shown in several columns. The
-features in the table can be searched, selected, moved or even edited.
+represents one map feature and each column contains a particular piece of
+information about the feature. Features in the table can be searched, selected,
+moved or even edited.
 
 To open the attribute table for a vector layer, make the layer active by clicking
 on it in the map legend area. Then use \mainmenuopt{Layer} from the main menu
 and and choose \dropmenuopttwo{mActionOpenTable}{Open Attribute Table}
 from the menu. It is also possible to rightlick on the layer and
 choose \dropmenuopttwo{mActionOpenTable}{Open Attribute Table} from the
-dropdown menu. This will open a new window which displays the attributes for
-every feature in the layer (figure \ref{fig:attributetable}). The number of features
-are shown in the attribute table title.
+dropdown menu.
+
+This will open a new window which displays the feature attributes in the 
+layer (figure \ref{fig:attributetable}). The number of features and the number 
+of selected features are shown in the attribute table title.
 
 \begin{figure}[ht]
    \centering
@@ -1966,72 +2094,88 @@
 
 \minisec{Selecting features in an attribute table}
 
-\textbf{A selected row} in the attribute table represents all attributes of a
-selected feature in the layer. The attribute table reflects any changes
-in the layer selection in the main window and vice versa. A changed selection
-in the attribute table also causes a change in the selected feature set in the
-main window and different layer feature selection means different rows are to be
-selected.
+\textbf{Each selected row} in the attribute table displays the attributes of a
+selected feature in the layer. If the set of features selected in the main window
+is changed, the selection is also updated in the attribute table.
+Likewise, if the set of rows selected in the attribute table is changed, the
+set of features selected in the main window will be updated.
 
 Rows can be selected by clicking on the row number on the left side of the
-row. Selecting a row doesn't change the current cursor position. \textbf{Multiple
-rows} can be marked by holding the \keystroke{Ctrl} key. A \textbf{continuous
-selection} can be made by holding the \keystroke{Shift} key and clicking on several
-row headers on the left side of the rows. All rows between the current cursor
-position and the clicked row are selected.
-
-Each column can be sorted by clicking on its column header. A small arrow
-indicates the sort order (downward pointing means descending values from the top
-row down, upward pointing means ascending values from the top rown down).
+row. \textbf{Multiple rows} can be marked by holding the \keystroke{Ctrl} key. A
+\textbf{continuous selection} can be made by holding the \keystroke{Shift} key and
+clicking on several row headers on the left side of the rows. All rows between the
+current cursor position and the clicked row are selected. Moving the cursor
+position in the attribute table, by clicking a cell in the table, does not change
+the row selection. Changing the selection in the main canvas does not move the
+cursor position in the attribute table.
+
+The table can be sorted by any column, by clicking on the column header. A small
+arrow indicates the sort order (downward pointing means descending values from the
+top row down, upward pointing means ascending values from the top row down).
 
 For a \textbf{simple search by attributes} on only one column the \button{Look for}
 field can be used. Select the field (column) from which the search should be
-performed from the dropdown menu and hit the \button{Search} button. The number of
-matching rows will appear in the status bar. For more complex searches use
-the Advanced search \button{...}, which will lauch the Search Query Builder
+performed from the dropdown menu and hit the \button{Search} button. The matching
+rows will be selected and the total number of
+matching rows will appear in the title bar of the attribute table, and in the
+status bar of the main window. For more complex searches use
+the Advanced search \button{...}, which will launch the Search Query Builder
 described in Section \ref{sec:select_by_query}.
 
-To show selected records only, use the checkbox \checkbox{Show selected records only}. To search selected records only, use the checkbox \checkbox{Search selected records only}. The other buttons at the bottom left of the attribute table window provide following functionality:
+To show selected records only, use the checkbox \checkbox{Show selected only}. 
+To search selected records only, use the checkbox \checkbox{Search selected 
+only}. The \checkbox{Case sensitive} checkbox allows to select case sensitive. 
+The other buttons at the bottom left of the attribute table window provide 
+following functionality:
 
 \begin{itemize}[label=--]
-\item \toolbtntwo{mActionOpenTable}{Remove selection}
-\item \toolbtntwo{mActionSelectedToTop}{Move selected to top}
-\item \toolbtntwo{mActionInvertSelection}{Invert selection}
-\item \toolbtntwo{mActionCopySelected}{Copy selected rows to clipboard} also with \keystroke{Ctrl-C}
-\item \toolbtntwo{mActionZoomToSelected}{Zoom map to selected rows} also with \keystroke{Ctrl-J}
+\item \toolbtntwo{mActionOpenTable}{Unselect all} also with \keystroke{Ctrl-U}
+\item \toolbtntwo{mActionSelectedToTop}{Move selected to top} also with 
+\keystroke{Ctrl-T}
+\item \toolbtntwo{mActionInvertSelection}{Invert selection} also with 
+\keystroke{Ctrl-S}
+\item \toolbtntwo{mActionCopySelected}{Copy selected rows to clipboard} also 
+with \keystroke{Ctrl-C}
+\item \toolbtntwo{mActionZoomToSelected}{Zoom map to the selected rows} also 
+with \keystroke{Ctrl-J}
 \item \toolbtntwo{mActionToggleEditing}{toggle editing mode} to edit single values
-of attribute table and to enable functionalities described below.
-\item \toolbtntwo{mActionDeleteSelected}{Delete Selected Features}
-\item \toolbtntwo{mActionNewAttribute}{New Column} for PostGIS layers and for OGR layers with GDAL version >= 1.6.
-\item \toolbtntwo{mActionDeleteAttribute}{Delete Column} only for PostGIS layers yet.
-\item \toolbtntwo{mActionCalculateField}{Open field calcultor}
+of attribute table and to enable functionalities described below also with 
+\keystroke{Ctrl-E}
+\item \toolbtntwo{mActionDeleteSelected}{Delete selected features} also with 
+\keystroke{Ctrl-D}
+\item \toolbtntwo{mActionNewAttribute}{New Column} for PostGIS layers and for 
+OGR layers with GDAL version >= 1.6 also with \keystroke{Ctrl-W}
+\item \toolbtntwo{mActionDeleteAttribute}{Delete Column} only for PostGIS layers 
+yet also with \keystroke{Ctrl-L}
+\item \toolbtntwo{mActionCalculateField}{Open field calculator} also with 
+\keystroke{Ctrl-I}
 \end{itemize}
 
 \minisec{Save selected features as new layer}
 \index{editing!save selection as new layer}
 
 The selected features can be saved as any OGR supported vector format and also
-transformed into another Coordinate Reference System (CRS). Just open the right mouse
-menu of the layer and click on \dropmenuopt{Save selection as} to define the
-name of the output file, its format and CRS (see Section \ref{label_legend}). It is 
-also possible to specify OGR creation options within the dialog.
+transformed into another Coordinate Reference System (CRS). Just open the right 
+mouse menu of the layer and click on \dropmenuopt{Save selection as} to define 
+the name of the output file, its format and CRS (see Section \ref{label_legend}). 
+It is also possible to specify OGR creation options within the dialog.
 
 \begin{Tip}\caption{\textsc{Manipulating Attribute data}}
 Currently only PostGIS layers are supported for adding or dropping
 attribute columns within this dialog. In future versions of \qg, other
-datasources will be supported, because this feature was recently implemented
-in GDAL/OGR > 1.6.0
+datasources will be supported, because this feature was implemented in GDAL/OGR 
+> 1.6.0
 \end{Tip}
 
 \minisec{Working with non spatial attribute tables}
 \index{editing!working with non spatial tables}
 
-QGIS allows also to load non spatial tables. This includes currently tables supported 
-by OGR, delimited text and the PostgreSQL provider. The tables can be used for field 
-lookups or just generally browsed and edited using the table view. When you load the 
-table you will see it in the legend field. It can be opened e.g. with the 
-\dropmenuopttwo{mActionOpenTable}{Open Attribute Table} tool and is then editable 
-like any other layer attribute table. 
+QGIS allows also to load non spatial tables. This includes currently tables 
+supported by OGR, delimited text and the PostgreSQL provider. The tables can be 
+used for field lookups or just generally browsed and edited using the table view. 
+When you load the table you will see it in the legend field. It can be opened 
+e.g. with the \dropmenuopttwo{mActionOpenTable}{Open Attribute Table} tool and 
+is then editable like any other layer attribute table. 
 
 As an example you can use columns of the non spatial table to define attribute values or 
 a range of values that are allowed to be added to a specific vector layer during digitizing. 
@@ -2049,7 +2193,6 @@
 \ref{fig:query_builder} shows an example of the query builder populated with
 data from a PostGIS layer with attributes stored in PostgreSQL.
 The Fields, Values and Operators sections help the user to construct the SQL-like
-WHERE clause easily in the text field SQL where clause window.
 
 \begin{figure}[ht]
   \centering
@@ -2075,18 +2218,19 @@
 ( = , > , \dots), string comparison operator ( LIKE ), logical operators ( AND , OR
 , \dots) are available.
 
-The \button{Clear} button clears the text in the SQL where clause text field. The
-\button{Test} button shows a message box with the number of features satisfying
-the current query, which is usable in the process of query construction. The
-\button{OK} button closes the window and selects the features satisfying the
-query. The \button{Cancel} button closes the window without changing the current
-selection.
+The \button{Test} button shows a message box with the number of features 
+satisfying the current query, which is usable in the process of query 
+construction. The \button{Clear} button clears the text in the SQL where clause 
+text field. The \button{Save} and \button{Load} button allow to save and load 
+SQL queries. The \button{OK} button closes the window and selects the features 
+satisfying the query. The \button{Cancel} button closes the window without 
+changing the current selection.
 
 \begin{Tip}\caption{\textsc{Changing the Layer Definition}}\index{Query
 Builder!changing layer definitions}
-You can change the layer definition after it is loaded by altering
-the SQL query used to define the layer. To do this, open the
-vector \dialog{Layer Properties} dialog by double-clicking on the layer in the legend and click on the
+You can change the layer definition after it is loaded by altering the SQL query 
+used to define the layer. To do this, open the vector \dialog{Layer Properties} 
+dialog by double-clicking on the layer in the legend and click on the 
 \button{Query Builder} button on the \tab{General} tab. See Section
 \ref{sec:vectorprops} for more information.
 \end{Tip}
@@ -2100,8 +2244,7 @@
 query function is to highlight all features that meet a particular criteria.
 Select by query can be used with all vector data providers.
 
-To do a `select by query' on a loaded layer, click on the
-button \toolbtntwo{mActionOpenTable}{Open Table} to open the attribute table of the layer. Then
+To do a `select by query' on a loaded layer, click on the button \toolbtntwo{mActionOpenTable}{Open Table} to open the attribute table of the layer. Then
 click the \button{Advanced...} button at the bottom. This starts the Query Builder
 that allows to define a subset of a table and display it as described in Section
 \ref{sec:query_builder}.
@@ -2110,10 +2253,10 @@
 \index{Query Builder!save selection as new layer}
 
 The selected features can be saved as any OGR supported vector format and also
-transformed into another Coordinate Reference System (CRS). Just open the right mouse
-menu of the layer and click on \dropmenuopt{Save selection as} to define the
-name of the output file, its format and CRS (see Section \ref{label_legend}). It is 
-also possible to specify OGR creation options within the dialog.
+transformed into another Coordinate Reference System (CRS). Just open the right 
+mouse menu of the layer and click on \dropmenuopt{Save selection as} to define 
+the name of the output file, its format and CRS (see Section \ref{label_legend}). 
+It is also possible to specify OGR creation options within the dialog.
 
 \section{Field Calculator}\label{sec:field_calculator}
 \index{PostgreSQL!field calculator}
@@ -2185,3 +2328,54 @@
 \item Now click on Operator 'length' to add it as \$length into the
 field calculator expression box and click \button{Ok}.
 \end{enumerate}
+
+Due to limited space screeen, not all the operators are available through the buttons. They are all listed in the following table.
+
+\begin{center}
+{\setlength{\extrarowheight}{10pt}
+\small
+\begin{longtable}{|p{4cm}|p{10cm}|}
+\hline \multicolumn{2}{|c|}{\textbf{List of operators supported by the field calculator}}\\
+\hline \textbf{String}&\textbf{Literal string value}\\
+\endfirsthead
+\hline \textbf{String}&\textbf{Literal string value}\\
+\endhead
+\hline \multicolumn{2}{|r|}{{See next page}} \\ \hline
+\endfoot
+\endlastfoot
+\hline NULL & null value \\
+\hline sqrt(\textit{a}) & square root \\
+\hline sin(\textit{a}) & sinus of \textit{a} \\
+\hline cos(\textit{a}) & cosinus of \textit{b} \\
+\hline tan(\textit{a}) & tangens of \textit{a} \\
+\hline asin(\textit{a}) & arcussinus of \textit{a} \\
+\hline acos(\textit{a}) & arcuscosinus of \textit{a} \\
+\hline atan(\textit{a}) & arcustangens of \textit{a} \\
+\hline to int(\textit{a}) & convert string \textit{a} to integer \\
+\hline to real(\textit{a}) & convert string \textit{a} to real \\
+\hline to string(\textit{a}) & convert number \textit{a} to string \\
+\hline lower(\textit{a}) & convert string \textit{a} to lower case \\
+\hline upper(\textit{a}) & convert string \textit{a} to upper case \\
+\hline length(\textit{a}) & length of string \textit{a} \\
+\hline atan2(y,x) & arcustangens of y/x using the signs of the two arguments to determine the quadrant of the result. \\
+\hline replace(\textit{a}, replacethis, withthat) & replace \textit{replacethis} with \textit{withthat} in string \textit{a} \\
+\hline substr(\textit{a},from,len) & len characters of string \textit{a} starting from from (first character index is 1) \\
+\hline \textit{a} || \textit{b} & concatenate strings \textit{a} and \textit{b} \\
+\hline \$rownum & number current row \\
+\hline \$area & area of polygon \\
+\hline \$perimeter & perimeter of polygon \\
+\hline \$length & area of line \\
+\hline \$id & feature id \\
+\hline \$x & x coordinate of point \\
+\hline \$y & y coordinate of point \\
+\hline \textit{a} $\wedge$ \textit{b} & \textit{a} raised to the power of \textit{b} \\
+\hline \textit{a} * \textit{b} & \textit{a} multiplied by \textit{b} \\
+\hline \textit{a} / \textit{b} & \textit{a} divided by \textit{b} \\
+\hline \textit{a} + \textit{b} & \textit{a} plus \textit{b} \\
+\hline \textit{a} - \textit{b} & \textit{a} minus \textit{b} \\
+\hline + \textit{a} & positive sign \\
+\hline - \textit{a} & negative value of \textit{a} \\
+\hline 
+\caption{List of operators for the field calculator}\\
+\end{longtable}}
+\end{center}
