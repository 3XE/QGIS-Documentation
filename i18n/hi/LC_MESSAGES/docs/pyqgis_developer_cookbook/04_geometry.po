# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-29 19:57\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:11
# 4be9aca8e2004421b809cd00772da75b
msgid "Geometry Handling"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:13
# b163eba74bae44f1ac925db75fb8bec3
msgid "Points, linestrings, polygons that represent a spatial feature are commonly referred to as geometries. In QGIS they are represented with :class:`QgsGeometry` class. All possible geometry types are nicely shown in `JTS discussion page <http://www.vividsolutions.com/jts/discussion.htm#spatialDataModel>`_."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:18
# ab49b659118b4f25a29b50e22b583d72
msgid "Sometimes one geometry is actually a collection of simple (single-part) geometries. Such a geometry is called multi-part geometry. If it contains just one type of simple geometry, we call it multi-point, multi-linestring or multi-polygon. For example, a country consisting of multiple islands can be represented as a multi-polygon."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:24
# be82c565bfbf49b3b4b9f9a581b8cb97
msgid "The coordinates of geometries can be in any coordinate reference system (CRS). When fetching features from a layer, associated geometries will have coordinates in CRS of the layer."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:31
# b07191324ab84d24af80b87a04b1176a
msgid "Geometry Construction"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:33
# fa0fd6fbf2eb4b7bb293e1be607cfccc
msgid "There are several options how to create a geometry:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:35
# a96c937e6893437e90b800bcb85361b1
msgid "from coordinates::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:41
# e1e34414a0924ea5a17652fc600cc267
msgid "Coordinates are given using :class:`QgsPoint` class."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:43
# 7654c299fca2459c9d30b5f3b0e581be
msgid "Polyline (Linestring) is represented by a list of points. Polygon is represented by a list of linear rings (i.e. closed linestrings). First ring is outer ring (boundary), optional subsequent rings are holes in the polygon."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:47
# 08667e21b56743e79d840b0db8f21f2c
msgid "Multi-part geometries go one level further: multi-point is a list of points, multi-linestring is a list of linestrings and multi-polygon is a list of polygons."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:51
# 4a99d6adff8b499fbc20f237f1942803
msgid "from well-known text (WKT)::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:55
# a1057f764d0d475cb985b29329a93e4e
msgid "from well-known binary (WKB)::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:64
# 48b75b0e960c491fa86165414af1c871
msgid "Access to Geometry"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:66
# e3ff2f09dafa4d1b817ad88c24809442
msgid "First, you should find out geometry type, :func:`wkbType` method is the one to use --- it returns a value from QGis.WkbType enumeration::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:78
# 1bf449687f9f46be8dbe5951156e4567
msgid "As an alternative, one can use :func:`type` method which returns a value from QGis.GeometryType enumeration. There is also a helper function :func:`isMultipart` to find out whether a geometry is multipart or not."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:82
# f78233fe47964cc59bfb17c227cd5b89
msgid "To extract information from geometry there are accessor functions for every vector type. How to use accessors::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:92
# 6d9ca555ffec4700981476ed6c9915fa
msgid "Note: the tuples (x,y) are not real tuples, they are :class:`QgsPoint` objects, the values are accessible with :func:`x` and :func:`y` methods."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:95
# 49062e564d9941499b14a3f9e2230bd8
msgid "For multipart geometries there are similar accessor functions: :func:`asMultiPoint`, :func:`asMultiPolyline`, :func:`asMultiPolygon()`."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:101
# d9aa45e9da83429d848e2244a49d591c
msgid "Geometry Predicates and Operations"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:103
# 9c126beb3c674087a9c080f0af63a8ac
msgid "QGIS uses GEOS library for advanced geometry operations such as geometry predicates (:func:`contains`, :func:`intersects`, ...) and set operations (:func:`union`, :func:`difference`, ...)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:108
# 906fde47d56e484daa20f8ba4e515e1b
msgid "**TODO:**"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:110
# 061fb93f12674d7a92f2e44eab1d45db
msgid ":func:`area`, :func:`length`, :func:`distance`"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:111
# e15000068f2a49629a640b5091648917
msgid ":func:`transform`"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/04_geometry.rst:112
# 411107f78313406183a2da69f37a5903
msgid "available predicates and set operations"
msgstr ""

