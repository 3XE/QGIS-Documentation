# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-29 19:57\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:11
# 713bd25d293446f2a348c7faf35bed2e
msgid "Reading And Storing Settings"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:13
# 4bbce4ebb3f84f62b59b3ee1b49c045b
msgid "Many times it is useful for a plugin to save some variables so that the user does not have to enter or select them again next time the plugin is run."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:16
# 07acb43be11d407782bdc9ba88f41fa9
msgid "These variables can be saved a retrieved with help of Qt and QGIS API. For each variable, you should pick a key that will be used to access the variable --- for user's favourite color you could use key \"favourite_color\" or any other meaningful string. It is recommended to give some structure to naming of keys."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:21
# bb3fcd7f251149b6b6819490d35041cd
msgid "We can make difference between several types of settings:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:25
# 613ad27cdb794f83997a0f52457566b5
msgid "**global settings** --- they are bound to the user at particular machine. QGIS itself stores a lot of global settings, for example, main window size or default snapping tolerance. This functionality is provided directly by Qt framework by the means of QSettings class. By default, this class stores settings in system's \"native\" way of storing settings, that is --- registry (on Windows), .plist file (on Mac OS X) or .ini file (on Unix). The `QSettings documentation <http://doc.qt.nokia.com/stable/qsettings.html>`_ is comprehensive, so we will provide just a simple example::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:46
# fd066692b74c46cfa75a37ac0fa52035
msgid "Qt uses QVariant instances for variable values in setValue() and value() methods. Your values are automagically converted from Python to QVariant instances, however the conversion from QVariant to Python is not automatic: that's why we use the to*() methods. Few more things to note here:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:51
# 0d2740db88e048b5b7b0b77760cebd1d
msgid "the second parameter to value() method is optional and states the default value if there is no previous value set"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:53
# 449dc739e2184defb6f56fad1172a337
msgid "toString() returns a QString instance, not a Python string"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:54
# b0c91ee624c14085bbe65f4ac52d8848
msgid "toInt() and toDouble() return tuples (value, ok) --- the second item indicates const:`True` if whether the conversion from QVariant to the number went fine --- in this example we ignore that indicator and only take the value."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:60
# 6fe991266be24efbbf84dd9834fe78c2
msgid "**project settings** --- vary between different projects and therefore they are connected with a project file. Map canvas background or destination coordinate reference system (CRS) are examples --- white background and WGS84 might be suitable for one project, while yellow background and UTM projection for another one. An example of usage follows::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:76
# 739be22426ac420d9b1e800191b4e2f1
msgid "Hopefully the QgsProject class will be updated in future to provide API similar to the one of QSettings class. Due to some limitations of Python bindings, it is not possible to save floating point numbers."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:82
# 694e7b9a608a4671a42a7c514b5e77c4
msgid "**map layer settings** --- these settings are related to a particular instance of a map layer with a project. They are *not* connected with underlying data source of a layer, so if you create two map layer instances of one shapefile, they will not share the settings. The settings are stored in project file, so if the user opens the project again, the layer-related settings will be there again. This functionality has been added in QGIS v1.4. The API is similar to QSettings --- it takes and returns QVariant instances::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:99
# 255f06dafddb448b8ea20aef0d2c0a76
msgid "**TODO:**"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/10_settings.rst:98
# 39bce5c645ae41bdb0ddc5a173e45cfe
msgid "Keys for settings that can be shared among plugins"
msgstr ""

