# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: qgis-documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-10 23:17\n"
"PO-Revision-Date: 2013-03-22 16:45+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Japanese (http://www.transifex.com/projects/p/qgis-documentation/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 2ea95a8bd1b8465aab6eb24fef94d7da
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:11
msgid "Reading And Storing Settings"
msgstr ""

# e0ebd122310a481f87589b8a3e3d1b15
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:13
msgid ""
"Many times it is useful for a plugin to save some variables so that the user"
" does not have to enter or select them again next time the plugin is run."
msgstr ""

# 5ee15e4c6e9048b0a5dbf2e34b8dd175
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:16
msgid ""
"These variables can be saved a retrieved with help of Qt and QGIS API. For "
"each variable, you should pick a key that will be used to access the "
"variable --- for user's favourite color you could use key "
"\"favourite_color\" or any other meaningful string. It is recommended to "
"give some structure to naming of keys."
msgstr ""

# bb9bb12912014e25a9d02da42f851e35
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:21
msgid "We can make difference between several types of settings:"
msgstr ""

# 9155de6c55064cf7a6c7aff61f38b527
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:25
msgid ""
"**global settings** --- they are bound to the user at particular machine. "
"QGIS itself stores a lot of global settings, for example, main window size "
"or default snapping tolerance. This functionality is provided directly by Qt"
" framework by the means of QSettings class. By default, this class stores "
"settings in system's \"native\" way of storing settings, that is --- "
"registry (on Windows), .plist file (on Mac OS X) or .ini file (on Unix). The"
" `QSettings documentation <http://doc.qt.nokia.com/stable/qsettings.html>`_ "
"is comprehensive, so we will provide just a simple example::"
msgstr ""

# a89661488e464ebf916cbb3af9b4e83d
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:73
msgid ""
"**map layer settings** --- these settings are related to a particular "
"instance of a map layer with a project. They are *not* connected with "
"underlying data source of a layer, so if you create two map layer instances "
"of one shapefile, they will not share the settings. The settings are stored "
"in project file, so if the user opens the project again, the layer-related "
"settings will be there again. This functionality has been added in QGIS "
"v1.4. The API is similar to QSettings --- it takes and returns QVariant "
"instances::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:47
msgid ""
"The second parameter of the :func:`value()` method is optional and specifies"
" the default value if there is no previous value set for the passed setting "
"name."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:51
msgid ""
"**project settings** --- vary between different projects and therefore they "
"are connected with a project file. Map canvas background color or "
"destination coordinate reference system (CRS) are examples --- white "
"background and WGS84 might be suitable for one project, while yellow "
"background and UTM projection are better for another one. An example of "
"usage follows::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:69
msgid ""
"As you can see, the :func:`writeEntry` method is used for all data types, "
"but several methods exist for reading the setting value back, and the "
"corresponding one has to be selected for each data type."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:5
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:5
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:23
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:49
#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:71
msgid "settings"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:5
msgid "reading"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:5
msgid "storing"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:23
msgid "global"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:49
msgid "project"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/settings.rst:71
msgid "map layer"
msgstr ""

#~ msgid ""
#~ "Qt uses QVariant instances for variable values in setValue() and value() "
#~ "methods. Your values are automagically converted from Python to QVariant "
#~ "instances, however the conversion from QVariant to Python is not automatic: "
#~ "that's why we use the to*() methods. Few more things to note here:"
#~ msgstr ""

#~ msgid ""
#~ "the second parameter to value() method is optional and states the default "
#~ "value if there is no previous value set"
#~ msgstr ""

#~ msgid "toString() returns a QString instance, not a Python string"
#~ msgstr ""

#~ msgid ""
#~ "toInt() and toDouble() return tuples (value, ok) --- the second item "
#~ "indicates const:`True` if whether the conversion from QVariant to the number"
#~ " went fine --- in this example we ignore that indicator and only take the "
#~ "value."
#~ msgstr ""

#~ msgid ""
#~ "**project settings** --- vary between different projects and therefore they "
#~ "are connected with a project file. Map canvas background or destination "
#~ "coordinate reference system (CRS) are examples --- white background and "
#~ "WGS84 might be suitable for one project, while yellow background and UTM "
#~ "projection for another one. An example of usage follows::"
#~ msgstr ""

#~ msgid ""
#~ "Hopefully the QgsProject class will be updated in future to provide API "
#~ "similar to the one of QSettings class. Due to some limitations of Python "
#~ "bindings, it is not possible to save floating point numbers."
#~ msgstr ""

#~ msgid "Keys for settings that can be shared among plugins"
#~ msgstr ""
